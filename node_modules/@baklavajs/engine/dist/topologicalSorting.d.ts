import { AbstractNode, Graph, IConnection } from "@baklavajs/core";
export interface ITopologicalSortingResult {
    calculationOrder: AbstractNode[];
    connectionsFromNode: Map<AbstractNode, IConnection[]>;
    /** NodeInterface.id -> parent Node.id */
    interfaceIdToNodeId: Map<string, string>;
}
export declare class CycleError extends Error {
    constructor();
}
/** Uses Kahn's algorithm to topologically sort the nodes in the graph */
export declare function sortTopologically(graph: Graph): ITopologicalSortingResult;
/** Uses Kahn's algorithm to topologically sort the nodes in the graph */
export declare function sortTopologically(nodes: ReadonlyArray<AbstractNode>, connections: ReadonlyArray<IConnection>): ITopologicalSortingResult;
/** This overload is only used for internal purposes */
export declare function sortTopologically(nodesOrGraph: ReadonlyArray<AbstractNode> | Graph, connections?: ReadonlyArray<IConnection>): ITopologicalSortingResult;
/** Checks whether a graph contains a cycle */
export declare function containsCycle(graph: Graph): boolean;
/** Checks whether the provided set of nodes and connections contains a cycle */
export declare function containsCycle(nodes: ReadonlyArray<AbstractNode>, connections: ReadonlyArray<IConnection>): boolean;
