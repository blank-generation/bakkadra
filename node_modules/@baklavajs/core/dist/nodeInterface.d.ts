import { SequentialHook, BaklavaEvent, PreventableBaklavaEvent, IBaklavaEventEmitter, IBaklavaTapable } from "@baklavajs/events";
export interface INodeInterfaceState<T> extends Record<string, any> {
    id: string;
    templateId?: string | undefined;
    value: T;
}
export type NodeInterfaceMiddleware<T, A extends Array<any>> = (intf: NodeInterface<T>, ...args: A) => void;
export declare class NodeInterface<T = any> implements IBaklavaEventEmitter, IBaklavaTapable {
    id: string;
    /**
     * If the interface is instantiated by a graph template, this property will be
     * set to the id of the corresponding instance in the template
     */
    templateId?: string | undefined;
    /** Display name of the interface */
    name: string;
    /** Will be set automatically after the node was created */
    isInput?: boolean;
    /** Id of the node this interface is part of */
    nodeId: string;
    /** Whether to show the port (the thing connections connect to) */
    port: boolean;
    /** Whether to hide the node interface in the UI */
    hidden: boolean;
    /** The component which will be displayed when the interface is not connected or port === false */
    component?: any;
    events: {
        readonly setConnectionCount: BaklavaEvent<number, NodeInterface<T>>;
        readonly beforeSetValue: PreventableBaklavaEvent<T, NodeInterface<T>>;
        readonly setValue: BaklavaEvent<T, NodeInterface<T>>;
        readonly updated: BaklavaEvent<void, NodeInterface<T>>;
    };
    hooks: {
        readonly load: SequentialHook<INodeInterfaceState<T>, NodeInterface<T>, INodeInterfaceState<T>>;
        readonly save: SequentialHook<INodeInterfaceState<T>, NodeInterface<T>, INodeInterfaceState<T>>;
    };
    private _connectionCount;
    set connectionCount(v: number);
    get connectionCount(): number;
    private _value;
    set value(v: T);
    get value(): T;
    constructor(name: string, value: T);
    load(state: INodeInterfaceState<T>): void;
    save(): INodeInterfaceState<T>;
    setComponent(value: any): this;
    setPort(value: boolean): this;
    setHidden(value: boolean): this;
    use<A extends Array<any>>(middleware: NodeInterfaceMiddleware<T, A>, ...args: A): this;
}
export type NodeInterfaceDefinition<T> = {
    [K in keyof T]: NodeInterface<T[K]>;
};
export type NodeInterfaceDefinitionStates<T> = {
    [K in keyof T]: INodeInterfaceState<T[K]>;
};
