import { v4 as uuidv4 } from "uuid";
import { Node } from "./node";
import { NodeInterface } from "./nodeInterface";
export const GRAPH_INPUT_NODE_TYPE = "__baklava_SubgraphInputNode";
export const GRAPH_OUTPUT_NODE_TYPE = "__baklava_SubgraphOutputNode";
class GraphInterfaceNode extends Node {
    constructor() {
        super();
        this.graphInterfaceId = uuidv4();
    }
    onPlaced() {
        super.onPlaced();
        this.initializeIo();
    }
    save() {
        return {
            ...super.save(),
            graphInterfaceId: this.graphInterfaceId,
        };
    }
    load(state) {
        super.load(state);
        this.graphInterfaceId = state.graphInterfaceId;
    }
}
export class GraphInputNode extends GraphInterfaceNode {
    constructor() {
        super(...arguments);
        this.type = GRAPH_INPUT_NODE_TYPE;
        this.inputs = {
            name: new NodeInterface("Name", "Input"),
        };
        this.outputs = {
            placeholder: new NodeInterface("Value", undefined),
        };
    }
    static isGraphInputNode(v) {
        return v.type === GRAPH_INPUT_NODE_TYPE;
    }
}
export class GraphOutputNode extends GraphInterfaceNode {
    constructor() {
        super(...arguments);
        this.type = GRAPH_OUTPUT_NODE_TYPE;
        this.inputs = {
            name: new NodeInterface("Name", "Output"),
            placeholder: new NodeInterface("Value", undefined),
        };
        this.outputs = {
            output: new NodeInterface("Output", undefined).setHidden(true),
        };
        this.calculate = ({ placeholder }) => ({
            output: placeholder,
        });
    }
    static isGraphOutputNode(v) {
        return v.type === GRAPH_OUTPUT_NODE_TYPE;
    }
}
