import { v4 as uuidv4 } from "uuid";
import { SequentialHook, BaklavaEvent, PreventableBaklavaEvent, } from "@baklavajs/events";
export class NodeInterface {
    set connectionCount(v) {
        this._connectionCount = v;
        this.events.setConnectionCount.emit(v);
    }
    get connectionCount() {
        return this._connectionCount;
    }
    set value(v) {
        if (this.events.beforeSetValue.emit(v).prevented) {
            return;
        }
        this._value = v;
        this.events.setValue.emit(v);
    }
    get value() {
        return this._value;
    }
    constructor(name, value) {
        this.id = uuidv4();
        /** Id of the node this interface is part of */
        this.nodeId = "";
        /** Whether to show the port (the thing connections connect to) */
        this.port = true;
        /** Whether to hide the node interface in the UI */
        this.hidden = false;
        this.events = {
            setConnectionCount: new BaklavaEvent(this),
            beforeSetValue: new PreventableBaklavaEvent(this),
            setValue: new BaklavaEvent(this),
            updated: new BaklavaEvent(this),
        };
        this.hooks = {
            load: new SequentialHook(this),
            save: new SequentialHook(this),
        };
        this._connectionCount = 0;
        this.name = name;
        this._value = value;
    }
    load(state) {
        this.id = state.id;
        this.templateId = state.templateId;
        this.value = state.value;
        this.hooks.load.execute(state);
    }
    save() {
        const state = {
            id: this.id,
            templateId: this.templateId,
            value: this.value,
        };
        return this.hooks.save.execute(state);
    }
    setComponent(value) {
        this.component = value;
        return this;
    }
    setPort(value) {
        this.port = value;
        return this;
    }
    setHidden(value) {
        this.hidden = value;
        return this;
    }
    use(middleware, ...args) {
        middleware(this, ...args);
        return this;
    }
}
