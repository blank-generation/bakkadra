"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphOutputNode = exports.GraphInputNode = exports.GRAPH_OUTPUT_NODE_TYPE = exports.GRAPH_INPUT_NODE_TYPE = void 0;
const uuid_1 = require("uuid");
const node_1 = require("./node");
const nodeInterface_1 = require("./nodeInterface");
exports.GRAPH_INPUT_NODE_TYPE = "__baklava_SubgraphInputNode";
exports.GRAPH_OUTPUT_NODE_TYPE = "__baklava_SubgraphOutputNode";
class GraphInterfaceNode extends node_1.Node {
    constructor() {
        super();
        this.graphInterfaceId = (0, uuid_1.v4)();
    }
    onPlaced() {
        super.onPlaced();
        this.initializeIo();
    }
    save() {
        return {
            ...super.save(),
            graphInterfaceId: this.graphInterfaceId,
        };
    }
    load(state) {
        super.load(state);
        this.graphInterfaceId = state.graphInterfaceId;
    }
}
class GraphInputNode extends GraphInterfaceNode {
    constructor() {
        super(...arguments);
        this.type = exports.GRAPH_INPUT_NODE_TYPE;
        this.inputs = {
            name: new nodeInterface_1.NodeInterface("Name", "Input"),
        };
        this.outputs = {
            placeholder: new nodeInterface_1.NodeInterface("Value", undefined),
        };
    }
    static isGraphInputNode(v) {
        return v.type === exports.GRAPH_INPUT_NODE_TYPE;
    }
}
exports.GraphInputNode = GraphInputNode;
class GraphOutputNode extends GraphInterfaceNode {
    constructor() {
        super(...arguments);
        this.type = exports.GRAPH_OUTPUT_NODE_TYPE;
        this.inputs = {
            name: new nodeInterface_1.NodeInterface("Name", "Output"),
            placeholder: new nodeInterface_1.NodeInterface("Value", undefined),
        };
        this.outputs = {
            output: new nodeInterface_1.NodeInterface("Output", undefined).setHidden(true),
        };
        this.calculate = ({ placeholder }) => ({
            output: placeholder,
        });
    }
    static isGraphOutputNode(v) {
        return v.type === exports.GRAPH_OUTPUT_NODE_TYPE;
    }
}
exports.GraphOutputNode = GraphOutputNode;
