import { BaklavaEvent, SequentialHook } from "@baklavajs/events";
import type { IConnectionState } from "./connection";
import type { Editor } from "./editor";
import { Graph, IGraphState } from "./graph";
import type { INodeState } from "./node";
import { IGraphInterface } from "./graphInterface";
type Optional<T, K extends keyof T> = Partial<Pick<T, K>> & Omit<T, K>;
export interface IGraphTemplateState extends IGraphState {
    name: string;
}
export declare class GraphTemplate implements IGraphState {
    /** Create a new GraphTemplate from the nodes and connections inside the graph instance */
    static fromGraph(graph: Graph, editor: Editor): GraphTemplate;
    /** Graph template id */
    id: string;
    /** List of all node states in this graph template */
    nodes: Array<INodeState<unknown, unknown>>;
    /** List of all connection states in this graph template */
    connections: IConnectionState[];
    /** Editor instance */
    editor: Editor;
    private _name;
    /** Get the name of the graph template */
    get name(): string;
    /** Set the name of the graph template */
    set name(v: string);
    /** List of all inputs to the graph template */
    get inputs(): Readonly<IGraphInterface[]>;
    /** List of all outputs of the graph template */
    get outputs(): Readonly<IGraphInterface[]>;
    constructor(state: Optional<IGraphTemplateState, "id" | "name">, editor: Editor);
    events: {
        readonly nameChanged: BaklavaEvent<string, GraphTemplate>;
        readonly updated: BaklavaEvent<void, GraphTemplate>;
    };
    hooks: {
        readonly beforeLoad: SequentialHook<IGraphTemplateState, GraphTemplate, IGraphTemplateState>;
        readonly afterSave: SequentialHook<IGraphTemplateState, GraphTemplate, IGraphTemplateState>;
    };
    /** Update the state of the graph template with the provided state */
    update(state: Omit<IGraphState, "id">): void;
    save(): IGraphTemplateState;
    /**
     * Create a new graph instance from this template
     * or load the state into the provided graph instance.
     */
    createGraph(graph?: Graph): Graph;
}
export {};
