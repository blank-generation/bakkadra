import { Subscribable } from "./subscribable";
export type HookTap<I, O, E> = (i: I, entity: E) => O;
export interface IBaklavaTapable {
    hooks: Record<string, Subscribable<HookTap<any, any, any>>>;
}
/** Similar to the SequentialHook, but allows to pass a different entity for each execute call */
export declare class DynamicSequentialHook<I, E, O extends I = I> extends Subscribable<HookTap<I, O, E>> {
    execute(data: I, entity: E): O;
}
/** This class will run the taps one after each other and pass the data from every subscriber to another. */
export declare class SequentialHook<I, E, O extends I = I> extends DynamicSequentialHook<I, E, O> {
    protected readonly entity: E;
    constructor(entity: E);
    execute(data: I): O;
}
export declare class ParallelHook<I, O, E> extends Subscribable<HookTap<I, O, E>> {
    protected readonly entity: E;
    constructor(entity: E);
    execute(data: I): O[];
}
