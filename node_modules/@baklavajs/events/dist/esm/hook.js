import { Subscribable } from "./subscribable";
/** Similar to the SequentialHook, but allows to pass a different entity for each execute call */
export class DynamicSequentialHook extends Subscribable {
    execute(data, entity) {
        let currentValue = data;
        for (const callback of this.listeners) {
            currentValue = callback(currentValue, entity);
        }
        return currentValue;
    }
}
/** This class will run the taps one after each other and pass the data from every subscriber to another. */
export class SequentialHook extends DynamicSequentialHook {
    constructor(entity) {
        super();
        this.entity = entity;
    }
    execute(data) {
        return super.execute(data, this.entity);
    }
}
export class ParallelHook extends Subscribable {
    constructor(entity) {
        super();
        this.entity = entity;
    }
    execute(data) {
        const results = [];
        for (const callback of this.listeners) {
            results.push(callback(data, this.entity));
        }
        return results;
    }
}
