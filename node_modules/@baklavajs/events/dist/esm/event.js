import { Subscribable } from "./subscribable";
/** Main event class for Baklava */
export class BaklavaEvent extends Subscribable {
    constructor(entity) {
        super();
        this.entity = entity;
    }
    /**
     * Invoke all listeners
     * @param data The data to invoke the listeners with.
     */
    emit(data) {
        this.listeners.forEach((l) => l(data, this.entity));
    }
}
/**
 * Extension for the {@link BaklavaEvent} class. A listener can return `false` to prevent
 * this event from happening.
 */
export class PreventableBaklavaEvent extends Subscribable {
    constructor(entity) {
        super();
        this.entity = entity;
    }
    /**
     * Invoke all listeners.
     * @param data The data to invoke all listeners with
     * @returns An object, where the `prevented` field is `true` when one of the listeners requested to prevent the event, otherwise `false`
     */
    emit(data) {
        let prevented = false;
        const prevent = () => [(prevented = true)];
        for (const l of Array.from(this.listeners.values())) {
            l(data, prevent, this.entity);
            if (prevented) {
                return { prevented: true };
            }
        }
        return { prevented: false };
    }
}
