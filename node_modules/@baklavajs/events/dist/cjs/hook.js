"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParallelHook = exports.SequentialHook = exports.DynamicSequentialHook = void 0;
const subscribable_1 = require("./subscribable");
/** Similar to the SequentialHook, but allows to pass a different entity for each execute call */
class DynamicSequentialHook extends subscribable_1.Subscribable {
    execute(data, entity) {
        let currentValue = data;
        for (const callback of this.listeners) {
            currentValue = callback(currentValue, entity);
        }
        return currentValue;
    }
}
exports.DynamicSequentialHook = DynamicSequentialHook;
/** This class will run the taps one after each other and pass the data from every subscriber to another. */
class SequentialHook extends DynamicSequentialHook {
    constructor(entity) {
        super();
        this.entity = entity;
    }
    execute(data) {
        return super.execute(data, this.entity);
    }
}
exports.SequentialHook = SequentialHook;
class ParallelHook extends subscribable_1.Subscribable {
    constructor(entity) {
        super();
        this.entity = entity;
    }
    execute(data) {
        const results = [];
        for (const callback of this.listeners) {
            results.push(callback(data, this.entity));
        }
        return results;
    }
}
exports.ParallelHook = ParallelHook;
