"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProxy = createProxy;
const subscribable_1 = require("./subscribable");
function createProxy() {
    const token = Symbol();
    const listeners = new Map();
    const targets = new Set();
    const register = (key, subscribable) => {
        if (subscribable instanceof subscribable_1.Subscribable) {
            subscribable.registerProxy(token, () => { var _a, _b; return (_b = (_a = listeners.get(key)) === null || _a === void 0 ? void 0 : _a.listeners) !== null && _b !== void 0 ? _b : []; });
        }
    };
    const addSubscribable = (key) => {
        const subscribable = new subscribable_1.Subscribable();
        listeners.set(key, subscribable);
        targets.forEach((t) => register(key, t[key]));
    };
    const addTarget = (target) => {
        targets.add(target);
        for (const key of listeners.keys()) {
            register(key, target[key]);
        }
    };
    const removeTarget = (target) => {
        for (const key of listeners.keys()) {
            if (target[key] instanceof subscribable_1.Subscribable) {
                target[key].unregisterProxy(token);
            }
        }
        targets.delete(target);
    };
    const destroy = () => {
        targets.forEach((t) => removeTarget(t));
        listeners.clear();
    };
    return new Proxy({}, {
        get(target, key) {
            if (key === "addTarget") {
                return addTarget;
            }
            else if (key === "removeTarget") {
                return removeTarget;
            }
            else if (key === "destroy") {
                return destroy;
            }
            if (typeof key !== "string" || key.startsWith("_")) {
                // vue internally uses properties starting with _ -> we just ignore them
                // also ignore all other properties that arent valid indexes for the events/hooks objects
                return target[key];
            }
            if (!listeners.has(key)) {
                addSubscribable(key);
            }
            return listeners.get(key);
        },
    });
}
