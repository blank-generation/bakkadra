import { IMenuItem } from '../contextmenu';
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    type: {
        type: StringConstructor;
        required: true;
    };
    title: {
        type: StringConstructor;
        required: true;
    };
}>, {
    showContextMenu: import('vue').Ref<boolean, boolean>;
    hasContextMenu: import('vue').ComputedRef<boolean>;
    contextMenuItems: IMenuItem[];
    openContextMenu: () => void;
    onContextMenuClick: (action: string) => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    type: {
        type: StringConstructor;
        required: true;
    };
    title: {
        type: StringConstructor;
        required: true;
    };
}>> & Readonly<{}>, {}, {}, {
    ContextMenu: import('vue').DefineComponent<{
        modelValue: boolean;
        items: IMenuItem[];
        x?: number;
        y?: number;
        isNested?: boolean;
        isFlipped?: {
            x: boolean;
            y: boolean;
        };
        flippable?: boolean;
    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        "update:modelValue": (args_0: boolean) => any;
        click: (value: string) => any;
    }, string, import('vue').PublicProps, Readonly<{
        modelValue: boolean;
        items: IMenuItem[];
        x?: number;
        y?: number;
        isNested?: boolean;
        isFlipped?: {
            x: boolean;
            y: boolean;
        };
        flippable?: boolean;
    }> & Readonly<{
        "onUpdate:modelValue"?: ((args_0: boolean) => any) | undefined;
        onClick?: ((value: string) => any) | undefined;
    }>, {
        x: number;
        y: number;
        isNested: boolean;
        isFlipped: {
            x: boolean;
            y: boolean;
        };
        flippable: boolean;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
        el: HTMLDivElement;
    }, any>;
    VerticalDots: import('vue').DefineComponent<{}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, SVGSVGElement>;
}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
