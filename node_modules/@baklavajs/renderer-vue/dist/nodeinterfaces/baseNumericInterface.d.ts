import { Ref } from 'vue';
import { NodeInterface } from '@baklavajs/core';
export interface IValidator {
    validate: (v: number) => boolean;
}
export declare class BaseNumericInterface extends NodeInterface<number> implements IValidator {
    min?: number;
    max?: number;
    constructor(name: string, value: number, min?: number, max?: number);
    validate(v: number): boolean;
}
export declare const useBaseNumericInterface: (intf: Ref<NodeInterface<number>>, precision?: number) => {
    editMode: Ref<boolean, boolean>;
    invalid: Ref<boolean, boolean>;
    tempValue: Ref<string, string>;
    inputEl: Ref<HTMLInputElement | null, HTMLInputElement | null>;
    stringRepresentation: import('vue').ComputedRef<string>;
    validate: (v: number) => boolean;
    setValue: (newValue: number) => void;
    enterEditMode: () => Promise<void>;
    leaveEditMode: () => void;
};
