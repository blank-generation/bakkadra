import { Ref } from 'vue';
import { AbstractNode } from '@baklavajs/core';
import { IBaklavaViewModel } from '../viewModel';
type __VLS_Props = {
    viewModel: IBaklavaViewModel;
};
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        background?(_: {}): any;
        toolbar?(_: {}): any;
        palette?(_: {}): any;
        connection?(_: {
            connection: import('@baklavajs/core').Connection;
        }): any;
        temporaryConnection?(_: {
            temporaryConnection: import('..').ITemporaryConnection | null;
        }): any;
        node?(_: {
            node: AbstractNode;
            selected: boolean;
            dragging: boolean;
            onStartDrag: (ev: PointerEvent) => void;
            onSelect: ($event: any) => void;
        }): any;
        sidebar?(_: {}): any;
        minimap?(_: {}): any;
        contextMenu?(_: {
            contextMenu: {
                show: Ref<boolean, boolean>;
                x: Ref<number, number>;
                y: Ref<number, number>;
                items: import('vue').ComputedRef<import('../contextmenu').IMenuItem[]>;
                open: (ev: MouseEvent) => void;
                onClick: (value: string) => void;
            };
        }): any;
    };
    refs: {
        el: HTMLDivElement;
    };
    rootEl: HTMLDivElement;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_Props, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<__VLS_Props> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    el: HTMLDivElement;
}, HTMLDivElement>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
