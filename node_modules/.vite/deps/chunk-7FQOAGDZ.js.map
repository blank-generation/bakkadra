{
  "version": 3,
  "sources": ["../../uuid/dist/esm-browser/regex.js", "../../uuid/dist/esm-browser/validate.js", "../../uuid/dist/esm-browser/parse.js", "../../uuid/dist/esm-browser/stringify.js", "../../uuid/dist/esm-browser/rng.js", "../../uuid/dist/esm-browser/md5.js", "../../uuid/dist/esm-browser/v35.js", "../../uuid/dist/esm-browser/v3.js", "../../uuid/dist/esm-browser/native.js", "../../uuid/dist/esm-browser/v4.js", "../../uuid/dist/esm-browser/sha1.js", "../../uuid/dist/esm-browser/v5.js", "../../@baklavajs/events/dist/esm/subscribable.js", "../../@baklavajs/events/dist/esm/event.js", "../../@baklavajs/events/dist/esm/hook.js", "../../@baklavajs/events/dist/esm/proxy.js", "../../@baklavajs/core/dist/esm/connection.js", "../../@baklavajs/core/dist/esm/utils.js", "../../@baklavajs/core/dist/esm/node.js", "../../@baklavajs/core/dist/esm/defineNode.js", "../../@baklavajs/core/dist/esm/dynamicNode.js", "../../@baklavajs/core/dist/esm/nodeInterface.js", "../../@baklavajs/core/dist/esm/graphInterface.js", "../../@baklavajs/core/dist/esm/graph.js", "../../@baklavajs/core/dist/esm/graphNode.js", "../../@baklavajs/core/dist/esm/graphTemplate.js", "../../@baklavajs/core/dist/esm/editor.js"],
  "sourcesContent": ["export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;\n", "import REGEX from './regex.js';\nfunction validate(uuid) {\n    return typeof uuid === 'string' && REGEX.test(uuid);\n}\nexport default validate;\n", "import validate from './validate.js';\nfunction parse(uuid) {\n    if (!validate(uuid)) {\n        throw TypeError('Invalid UUID');\n    }\n    let v;\n    return Uint8Array.of((v = parseInt(uuid.slice(0, 8), 16)) >>> 24, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff, (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, v & 0xff, ((v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000) & 0xff, (v / 0x100000000) & 0xff, (v >>> 24) & 0xff, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff);\n}\nexport default parse;\n", "import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n", "let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n", "function md5(bytes) {\n    const words = uint8ToUint32(bytes);\n    const md5Bytes = wordsToMd5(words, bytes.length * 8);\n    return uint32ToUint8(md5Bytes);\n}\nfunction uint32ToUint8(input) {\n    const bytes = new Uint8Array(input.length * 4);\n    for (let i = 0; i < input.length * 4; i++) {\n        bytes[i] = (input[i >> 2] >>> ((i % 4) * 8)) & 0xff;\n    }\n    return bytes;\n}\nfunction getOutputLength(inputLength8) {\n    return (((inputLength8 + 64) >>> 9) << 4) + 14 + 1;\n}\nfunction wordsToMd5(x, len) {\n    const xpad = new Uint32Array(getOutputLength(len)).fill(0);\n    xpad.set(x);\n    xpad[len >> 5] |= 0x80 << len % 32;\n    xpad[xpad.length - 1] = len;\n    x = xpad;\n    let a = 1732584193;\n    let b = -271733879;\n    let c = -1732584194;\n    let d = 271733878;\n    for (let i = 0; i < x.length; i += 16) {\n        const olda = a;\n        const oldb = b;\n        const oldc = c;\n        const oldd = d;\n        a = md5ff(a, b, c, d, x[i], 7, -680876936);\n        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n        c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n        b = md5gg(b, c, d, a, x[i], 20, -373897302);\n        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n        a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n        d = md5hh(d, a, b, c, x[i], 11, -358537222);\n        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n        a = md5ii(a, b, c, d, x[i], 6, -198630844);\n        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n        a = safeAdd(a, olda);\n        b = safeAdd(b, oldb);\n        c = safeAdd(c, oldc);\n        d = safeAdd(d, oldd);\n    }\n    return Uint32Array.of(a, b, c, d);\n}\nfunction uint8ToUint32(input) {\n    if (input.length === 0) {\n        return new Uint32Array();\n    }\n    const output = new Uint32Array(getOutputLength(input.length * 8)).fill(0);\n    for (let i = 0; i < input.length; i++) {\n        output[i >> 2] |= (input[i] & 0xff) << ((i % 4) * 8);\n    }\n    return output;\n}\nfunction safeAdd(x, y) {\n    const lsw = (x & 0xffff) + (y & 0xffff);\n    const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n    return (msw << 16) | (lsw & 0xffff);\n}\nfunction bitRotateLeft(num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt));\n}\nfunction md5cmn(q, a, b, x, s, t) {\n    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\nfunction md5ff(a, b, c, d, x, s, t) {\n    return md5cmn((b & c) | (~b & d), a, b, x, s, t);\n}\nfunction md5gg(a, b, c, d, x, s, t) {\n    return md5cmn((b & d) | (c & ~d), a, b, x, s, t);\n}\nfunction md5hh(a, b, c, d, x, s, t) {\n    return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\nfunction md5ii(a, b, c, d, x, s, t) {\n    return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\nexport default md5;\n", "import parse from './parse.js';\nimport { unsafeStringify } from './stringify.js';\nexport function stringToBytes(str) {\n    str = unescape(encodeURIComponent(str));\n    const bytes = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; ++i) {\n        bytes[i] = str.charCodeAt(i);\n    }\n    return bytes;\n}\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function v35(version, hash, value, namespace, buf, offset) {\n    const valueBytes = typeof value === 'string' ? stringToBytes(value) : value;\n    const namespaceBytes = typeof namespace === 'string' ? parse(namespace) : namespace;\n    if (typeof namespace === 'string') {\n        namespace = parse(namespace);\n    }\n    if (namespace?.length !== 16) {\n        throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    }\n    let bytes = new Uint8Array(16 + valueBytes.length);\n    bytes.set(namespaceBytes);\n    bytes.set(valueBytes, namespaceBytes.length);\n    bytes = hash(bytes);\n    bytes[6] = (bytes[6] & 0x0f) | version;\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = bytes[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(bytes);\n}\n", "import md5 from './md5.js';\nimport v35, { DNS, URL } from './v35.js';\nexport { DNS, URL } from './v35.js';\nfunction v3(value, namespace, buf, offset) {\n    return v35(0x30, md5, value, namespace, buf, offset);\n}\nv3.DNS = DNS;\nv3.URL = URL;\nexport default v3;\n", "const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n", "function f(s, x, y, z) {\n    switch (s) {\n        case 0:\n            return (x & y) ^ (~x & z);\n        case 1:\n            return x ^ y ^ z;\n        case 2:\n            return (x & y) ^ (x & z) ^ (y & z);\n        case 3:\n            return x ^ y ^ z;\n    }\n}\nfunction ROTL(x, n) {\n    return (x << n) | (x >>> (32 - n));\n}\nfunction sha1(bytes) {\n    const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n    const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n    const newBytes = new Uint8Array(bytes.length + 1);\n    newBytes.set(bytes);\n    newBytes[bytes.length] = 0x80;\n    bytes = newBytes;\n    const l = bytes.length / 4 + 2;\n    const N = Math.ceil(l / 16);\n    const M = new Array(N);\n    for (let i = 0; i < N; ++i) {\n        const arr = new Uint32Array(16);\n        for (let j = 0; j < 16; ++j) {\n            arr[j] =\n                (bytes[i * 64 + j * 4] << 24) |\n                    (bytes[i * 64 + j * 4 + 1] << 16) |\n                    (bytes[i * 64 + j * 4 + 2] << 8) |\n                    bytes[i * 64 + j * 4 + 3];\n        }\n        M[i] = arr;\n    }\n    M[N - 1][14] = ((bytes.length - 1) * 8) / Math.pow(2, 32);\n    M[N - 1][14] = Math.floor(M[N - 1][14]);\n    M[N - 1][15] = ((bytes.length - 1) * 8) & 0xffffffff;\n    for (let i = 0; i < N; ++i) {\n        const W = new Uint32Array(80);\n        for (let t = 0; t < 16; ++t) {\n            W[t] = M[i][t];\n        }\n        for (let t = 16; t < 80; ++t) {\n            W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n        }\n        let a = H[0];\n        let b = H[1];\n        let c = H[2];\n        let d = H[3];\n        let e = H[4];\n        for (let t = 0; t < 80; ++t) {\n            const s = Math.floor(t / 20);\n            const T = (ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t]) >>> 0;\n            e = d;\n            d = c;\n            c = ROTL(b, 30) >>> 0;\n            b = a;\n            a = T;\n        }\n        H[0] = (H[0] + a) >>> 0;\n        H[1] = (H[1] + b) >>> 0;\n        H[2] = (H[2] + c) >>> 0;\n        H[3] = (H[3] + d) >>> 0;\n        H[4] = (H[4] + e) >>> 0;\n    }\n    return Uint8Array.of(H[0] >> 24, H[0] >> 16, H[0] >> 8, H[0], H[1] >> 24, H[1] >> 16, H[1] >> 8, H[1], H[2] >> 24, H[2] >> 16, H[2] >> 8, H[2], H[3] >> 24, H[3] >> 16, H[3] >> 8, H[3], H[4] >> 24, H[4] >> 16, H[4] >> 8, H[4]);\n}\nexport default sha1;\n", "import sha1 from './sha1.js';\nimport v35, { DNS, URL } from './v35.js';\nexport { DNS, URL } from './v35.js';\nfunction v5(value, namespace, buf, offset) {\n    return v35(0x50, sha1, value, namespace, buf, offset);\n}\nv5.DNS = DNS;\nv5.URL = URL;\nexport default v5;\n", "export class Subscribable {\n    constructor() {\n        this.listenerMap = new Map();\n        this._listeners = [];\n        this.proxyMap = new Map();\n        this.proxies = [];\n    }\n    get listeners() {\n        return this._listeners.concat(this.proxies.flatMap((getListeners) => getListeners()));\n    }\n    /**\n     * Subscribe to the event / hook\n     * @param token A token that can be used to unsubscribe from the event / hook later on\n     * @param callback A callback that will be invoked when the event / hook occurs\n     */\n    subscribe(token, callback) {\n        if (this.listenerMap.has(token)) {\n            console.warn(\"Already subscribed. Unsubscribing for you.\\n\" +\n                \"Please check that you don't accidentally use the same token twice \" +\n                \"to register two different handlers for the same event/hook.\");\n            this.unsubscribe(token);\n        }\n        this.listenerMap.set(token, callback);\n        this._listeners.push(callback);\n    }\n    /**\n     * Remove a listener\n     * @param token The token that was specified when subscribing to the listener.\n     * An invalid token does not result in an error.\n     */\n    unsubscribe(token) {\n        if (this.listenerMap.has(token)) {\n            const callback = this.listenerMap.get(token);\n            this.listenerMap.delete(token);\n            const i = this._listeners.indexOf(callback);\n            if (i >= 0) {\n                this._listeners.splice(i, 1);\n            }\n        }\n    }\n    /** This function is only used internally for proxies */\n    registerProxy(token, getListeners) {\n        if (this.proxyMap.has(token)) {\n            console.warn(\"Already subscribed. Unsubscribing for you.\\n\" +\n                \"Please check that you don't accidentally use the same token twice \" +\n                \"to register two different proxies for the same event/hook.\");\n            this.unregisterProxy(token);\n        }\n        this.proxyMap.set(token, getListeners);\n        this.proxies.push(getListeners);\n    }\n    /** This function is only used internally for proxies */\n    unregisterProxy(token) {\n        if (!this.proxyMap.has(token)) {\n            return;\n        }\n        const getListeners = this.proxyMap.get(token);\n        this.proxyMap.delete(token);\n        const i = this.proxies.indexOf(getListeners);\n        if (i >= 0) {\n            this.proxies.splice(i, 1);\n        }\n    }\n}\n", "import { Subscribable } from \"./subscribable\";\n/** Main event class for Baklava */\nexport class BaklavaEvent extends Subscribable {\n    constructor(entity) {\n        super();\n        this.entity = entity;\n    }\n    /**\n     * Invoke all listeners\n     * @param data The data to invoke the listeners with.\n     */\n    emit(data) {\n        this.listeners.forEach((l) => l(data, this.entity));\n    }\n}\n/**\n * Extension for the {@link BaklavaEvent} class. A listener can return `false` to prevent\n * this event from happening.\n */\nexport class PreventableBaklavaEvent extends Subscribable {\n    constructor(entity) {\n        super();\n        this.entity = entity;\n    }\n    /**\n     * Invoke all listeners.\n     * @param data The data to invoke all listeners with\n     * @returns An object, where the `prevented` field is `true` when one of the listeners requested to prevent the event, otherwise `false`\n     */\n    emit(data) {\n        let prevented = false;\n        const prevent = () => [(prevented = true)];\n        for (const l of Array.from(this.listeners.values())) {\n            l(data, prevent, this.entity);\n            if (prevented) {\n                return { prevented: true };\n            }\n        }\n        return { prevented: false };\n    }\n}\n", "import { Subscribable } from \"./subscribable\";\n/** Similar to the SequentialHook, but allows to pass a different entity for each execute call */\nexport class DynamicSequentialHook extends Subscribable {\n    execute(data, entity) {\n        let currentValue = data;\n        for (const callback of this.listeners) {\n            currentValue = callback(currentValue, entity);\n        }\n        return currentValue;\n    }\n}\n/** This class will run the taps one after each other and pass the data from every subscriber to another. */\nexport class SequentialHook extends DynamicSequentialHook {\n    constructor(entity) {\n        super();\n        this.entity = entity;\n    }\n    execute(data) {\n        return super.execute(data, this.entity);\n    }\n}\nexport class ParallelHook extends Subscribable {\n    constructor(entity) {\n        super();\n        this.entity = entity;\n    }\n    execute(data) {\n        const results = [];\n        for (const callback of this.listeners) {\n            results.push(callback(data, this.entity));\n        }\n        return results;\n    }\n}\n", "import { Subscribable } from \"./subscribable\";\nexport function createProxy() {\n    const token = Symbol();\n    const listeners = new Map();\n    const targets = new Set();\n    const register = (key, subscribable) => {\n        if (subscribable instanceof Subscribable) {\n            subscribable.registerProxy(token, () => { var _a, _b; return (_b = (_a = listeners.get(key)) === null || _a === void 0 ? void 0 : _a.listeners) !== null && _b !== void 0 ? _b : []; });\n        }\n    };\n    const addSubscribable = (key) => {\n        const subscribable = new Subscribable();\n        listeners.set(key, subscribable);\n        targets.forEach((t) => register(key, t[key]));\n    };\n    const addTarget = (target) => {\n        targets.add(target);\n        for (const key of listeners.keys()) {\n            register(key, target[key]);\n        }\n    };\n    const removeTarget = (target) => {\n        for (const key of listeners.keys()) {\n            if (target[key] instanceof Subscribable) {\n                target[key].unregisterProxy(token);\n            }\n        }\n        targets.delete(target);\n    };\n    const destroy = () => {\n        targets.forEach((t) => removeTarget(t));\n        listeners.clear();\n    };\n    return new Proxy({}, {\n        get(target, key) {\n            if (key === \"addTarget\") {\n                return addTarget;\n            }\n            else if (key === \"removeTarget\") {\n                return removeTarget;\n            }\n            else if (key === \"destroy\") {\n                return destroy;\n            }\n            if (typeof key !== \"string\" || key.startsWith(\"_\")) {\n                // vue internally uses properties starting with _ -> we just ignore them\n                // also ignore all other properties that arent valid indexes for the events/hooks objects\n                return target[key];\n            }\n            if (!listeners.has(key)) {\n                addSubscribable(key);\n            }\n            return listeners.get(key);\n        },\n    });\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { BaklavaEvent } from \"@baklavajs/events\";\nexport class Connection {\n    constructor(from, to) {\n        this.destructed = false;\n        this.events = {\n            destruct: new BaklavaEvent(this),\n        };\n        if (!from || !to) {\n            throw new Error(\"Cannot initialize connection with null/undefined for 'from' or 'to' values\");\n        }\n        this.id = uuidv4();\n        this.from = from;\n        this.to = to;\n        this.from.connectionCount++;\n        this.to.connectionCount++;\n    }\n    destruct() {\n        this.events.destruct.emit();\n        this.from.connectionCount--;\n        this.to.connectionCount--;\n        this.destructed = true;\n    }\n}\n/**\n * This class is used for calculation purposes only.\n * It won't alter any state of the connected nodes\n */\nexport class DummyConnection {\n    constructor(from, to) {\n        if (!from || !to) {\n            throw new Error(\"Cannot initialize connection with null/undefined for 'from' or 'to' values\");\n        }\n        this.id = uuidv4();\n        this.from = from;\n        this.to = to;\n    }\n}\n", "/** Key type is limited due to https://github.com/microsoft/TypeScript/pull/37457 */\nexport function mapValues(obj, fn) {\n    return Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, fn(v)]));\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { PreventableBaklavaEvent, BaklavaEvent, SequentialHook, } from \"@baklavajs/events\";\nimport { mapValues } from \"./utils\";\nexport class AbstractNode {\n    constructor() {\n        this._title = \"\";\n        /** Unique identifier of the node */\n        this.id = uuidv4();\n        this.events = {\n            loaded: new BaklavaEvent(this),\n            beforeAddInput: new PreventableBaklavaEvent(this),\n            addInput: new BaklavaEvent(this),\n            beforeRemoveInput: new PreventableBaklavaEvent(this),\n            removeInput: new BaklavaEvent(this),\n            beforeAddOutput: new PreventableBaklavaEvent(this),\n            addOutput: new BaklavaEvent(this),\n            beforeRemoveOutput: new PreventableBaklavaEvent(this),\n            removeOutput: new BaklavaEvent(this),\n            beforeTitleChanged: new PreventableBaklavaEvent(this),\n            titleChanged: new BaklavaEvent(this),\n            update: new BaklavaEvent(this),\n        };\n        this.hooks = {\n            beforeLoad: new SequentialHook(this),\n            afterSave: new SequentialHook(this),\n        };\n    }\n    /**\n     * The graph instance the node is placed in.\n     * `undefined` if the node hasn't been placed in a graph yet.\n     */\n    get graph() {\n        return this.graphInstance;\n    }\n    /** Customizable display name of the node. */\n    get title() {\n        return this._title;\n    }\n    set title(v) {\n        if (!this.events.beforeTitleChanged.emit(v).prevented) {\n            this._title = v;\n            this.events.titleChanged.emit(v);\n        }\n    }\n    /**\n     * Add an input interface to the node\n     * @param key Key of the input\n     * @param input The input instance\n     * @returns True when the input was added, otherwise false (prevented by an event handler)\n     */\n    addInput(key, input) {\n        return this.addInterface(\"input\", key, input);\n    }\n    /**\n     * Add an output interface to the node\n     * @param key Key of the output\n     * @param output The output instance\n     * @returns True when the output was added, otherwise false (prevented by an event handler)\n     */\n    addOutput(key, output) {\n        return this.addInterface(\"output\", key, output);\n    }\n    /**\n     * Remove an existing input\n     * @param key Key of the input.\n     */\n    removeInput(key) {\n        return this.removeInterface(\"input\", key);\n    }\n    /**\n     * Remove an existing output\n     * @param key Key of the output.\n     */\n    removeOutput(key) {\n        return this.removeInterface(\"output\", key);\n    }\n    /**\n     * This function will automatically be called as soon as the node is added to a graph.\n     * @param editor Graph instance\n     */\n    registerGraph(graph) {\n        this.graphInstance = graph;\n    }\n    load(state) {\n        this.hooks.beforeLoad.execute(state);\n        this.id = state.id;\n        this._title = state.title;\n        Object.entries(state.inputs).forEach(([k, v]) => {\n            if (this.inputs[k]) {\n                this.inputs[k].load(v);\n                this.inputs[k].nodeId = this.id;\n            }\n        });\n        Object.entries(state.outputs).forEach(([k, v]) => {\n            if (this.outputs[k]) {\n                this.outputs[k].load(v);\n                this.outputs[k].nodeId = this.id;\n            }\n        });\n        this.events.loaded.emit(this);\n    }\n    save() {\n        const inputStates = mapValues(this.inputs, (intf) => intf.save());\n        const outputStates = mapValues(this.outputs, (intf) => intf.save());\n        const state = {\n            type: this.type,\n            id: this.id,\n            title: this.title,\n            inputs: inputStates,\n            outputs: outputStates,\n        };\n        return this.hooks.afterSave.execute(state);\n    }\n    /**\n     * @virtual\n     * Override this method to execute logic when the node is placed inside a graph\n     */\n    onPlaced() { }\n    /**\n     * @virtual\n     * Override this method to perform cleanup when the node is deleted\n     */\n    onDestroy() { }\n    initializeIo() {\n        Object.entries(this.inputs).forEach(([key, intf]) => this.initializeIntf(\"input\", key, intf));\n        Object.entries(this.outputs).forEach(([key, intf]) => this.initializeIntf(\"output\", key, intf));\n    }\n    initializeIntf(type, key, intf) {\n        intf.isInput = type === \"input\";\n        intf.nodeId = this.id;\n        intf.events.setValue.subscribe(this, () => this.events.update.emit({ type, name: key, intf }));\n    }\n    addInterface(type, key, intf) {\n        const beforeEvent = type === \"input\" ? this.events.beforeAddInput : this.events.beforeAddOutput;\n        const afterEvent = type === \"input\" ? this.events.addInput : this.events.addOutput;\n        const ioObject = type === \"input\" ? this.inputs : this.outputs;\n        if (beforeEvent.emit(intf).prevented) {\n            return false;\n        }\n        ioObject[key] = intf;\n        this.initializeIntf(type, key, intf);\n        afterEvent.emit(intf);\n        return true;\n    }\n    removeInterface(type, key) {\n        const beforeEvent = type === \"input\" ? this.events.beforeRemoveInput : this.events.beforeRemoveOutput;\n        const afterEvent = type === \"input\" ? this.events.removeInput : this.events.removeOutput;\n        const io = type === \"input\" ? this.inputs[key] : this.outputs[key];\n        if (!io || beforeEvent.emit(io).prevented) {\n            return false;\n        }\n        if (io.connectionCount > 0) {\n            if (this.graphInstance) {\n                const connections = this.graphInstance.connections.filter((c) => c.from === io || c.to === io);\n                connections.forEach((c) => {\n                    this.graphInstance.removeConnection(c);\n                });\n            }\n            else {\n                throw new Error(\"Interface is connected, but no graph instance is specified. Unable to delete interface\");\n            }\n        }\n        io.events.setValue.unsubscribe(this);\n        if (type === \"input\") {\n            delete this.inputs[key];\n        }\n        else {\n            delete this.outputs[key];\n        }\n        afterEvent.emit(io);\n        return true;\n    }\n}\n/**\n * Abstract base class for every node\n */\nexport class Node extends AbstractNode {\n    load(state) {\n        super.load(state);\n    }\n    save() {\n        return super.save();\n    }\n}\n", "import { Node } from \"./node\";\nexport function defineNode(definition) {\n    return class extends Node {\n        constructor() {\n            var _a, _b;\n            super();\n            this.type = definition.type;\n            this.inputs = {};\n            this.outputs = {};\n            this.calculate = definition.calculate\n                ? (inputs, globalValues) => {\n                    return definition.calculate.call(this, inputs, globalValues);\n                }\n                : undefined;\n            this._title = (_a = definition.title) !== null && _a !== void 0 ? _a : definition.type;\n            this.executeFactory(\"input\", definition.inputs);\n            this.executeFactory(\"output\", definition.outputs);\n            (_b = definition.onCreate) === null || _b === void 0 ? void 0 : _b.call(this);\n        }\n        onPlaced() {\n            var _a;\n            (_a = definition.onPlaced) === null || _a === void 0 ? void 0 : _a.call(this);\n        }\n        onDestroy() {\n            var _a;\n            (_a = definition.onDestroy) === null || _a === void 0 ? void 0 : _a.call(this);\n        }\n        executeFactory(type, factory) {\n            Object.keys(factory || {}).forEach((k) => {\n                const intf = factory[k]();\n                if (type === \"input\") {\n                    this.addInput(k, intf);\n                }\n                else {\n                    this.addOutput(k, intf);\n                }\n            });\n        }\n    };\n}\n", "import { Node } from \"./node\";\n/**\n * @internal\n * Abstract base class for every dynamic node\n */\nexport class DynamicNode extends Node {\n}\nexport function defineDynamicNode(definition) {\n    return class extends DynamicNode {\n        constructor() {\n            var _a, _b, _c, _d;\n            super();\n            this.type = definition.type;\n            this.inputs = {};\n            this.outputs = {};\n            this.preventUpdate = false;\n            this.staticInputKeys = Object.keys((_a = definition.inputs) !== null && _a !== void 0 ? _a : {});\n            this.staticOutputKeys = Object.keys((_b = definition.outputs) !== null && _b !== void 0 ? _b : {});\n            this._title = (_c = definition.title) !== null && _c !== void 0 ? _c : definition.type;\n            this.executeFactory(\"input\", definition.inputs);\n            this.executeFactory(\"output\", definition.outputs);\n            if (definition.calculate) {\n                this.calculate = (inputs, globalValues) => { var _a; return (_a = definition.calculate) === null || _a === void 0 ? void 0 : _a.call(this, inputs, globalValues); };\n            }\n            (_d = definition.onCreate) === null || _d === void 0 ? void 0 : _d.call(this);\n        }\n        onPlaced() {\n            var _a;\n            this.events.update.subscribe(this, (data) => {\n                if (!data) {\n                    return;\n                }\n                if ((data.type === \"input\" && this.staticInputKeys.includes(data.name)) ||\n                    (data.type === \"output\" && this.staticOutputKeys.includes(data.name))) {\n                    this.onUpdate();\n                }\n            });\n            this.onUpdate();\n            (_a = definition.onPlaced) === null || _a === void 0 ? void 0 : _a.call(this);\n        }\n        onDestroy() {\n            var _a;\n            (_a = definition.onDestroy) === null || _a === void 0 ? void 0 : _a.call(this);\n        }\n        load(state) {\n            // prevent automatic updates during loading\n            this.preventUpdate = true;\n            this.hooks.beforeLoad.execute(state);\n            this.id = state.id;\n            this.title = state.title;\n            // first load the state for the static interfaces\n            for (const k of this.staticInputKeys) {\n                this.inputs[k].load(state.inputs[k]);\n                this.inputs[k].nodeId = this.id;\n            }\n            for (const k of this.staticOutputKeys) {\n                this.outputs[k].load(state.outputs[k]);\n                this.outputs[k].nodeId = this.id;\n            }\n            // run the update function to correctly generate all interfaces\n            this.preventUpdate = false;\n            this.onUpdate();\n            this.preventUpdate = true;\n            // load the state for all generated interfaces\n            for (const k of Object.keys(state.inputs)) {\n                if (!this.staticInputKeys.includes(k)) {\n                    this.inputs[k].load(state.inputs[k]);\n                    this.inputs[k].nodeId = this.id;\n                }\n            }\n            for (const k of Object.keys(state.outputs)) {\n                if (!this.staticOutputKeys.includes(k)) {\n                    this.outputs[k].load(state.outputs[k]);\n                    this.outputs[k].nodeId = this.id;\n                }\n            }\n            this.preventUpdate = false;\n            this.events.loaded.emit(this);\n        }\n        onUpdate() {\n            var _a, _b, _c, _d;\n            if (this.preventUpdate) {\n                return;\n            }\n            if (this.graph) {\n                this.graph.activeTransactions++;\n            }\n            const inputValues = this.getStaticValues(this.staticInputKeys, this.inputs);\n            const outputValues = this.getStaticValues(this.staticOutputKeys, this.outputs);\n            const result = definition.onUpdate.call(this, inputValues, outputValues);\n            this.updateInterfaces(\"input\", (_a = result.inputs) !== null && _a !== void 0 ? _a : {}, (_b = result.forceUpdateInputs) !== null && _b !== void 0 ? _b : []);\n            this.updateInterfaces(\"output\", (_c = result.outputs) !== null && _c !== void 0 ? _c : {}, (_d = result.forceUpdateOutputs) !== null && _d !== void 0 ? _d : []);\n            if (this.graph) {\n                this.graph.activeTransactions--;\n            }\n        }\n        getStaticValues(keys, interfaces) {\n            const values = {};\n            for (const k of keys) {\n                values[k] = interfaces[k].value;\n            }\n            return values;\n        }\n        updateInterfaces(type, newInterfaces, forceUpdates) {\n            const staticKeys = type === \"input\" ? this.staticInputKeys : this.staticOutputKeys;\n            const currentInterfaces = type === \"input\" ? this.inputs : this.outputs;\n            // remove all interfaces that are outdated\n            for (const k of Object.keys(currentInterfaces)) {\n                if (staticKeys.includes(k) || (newInterfaces[k] && !forceUpdates.includes(k))) {\n                    continue;\n                }\n                if (type === \"input\") {\n                    this.removeInput(k);\n                }\n                else {\n                    this.removeOutput(k);\n                }\n            }\n            // add all new interfaces\n            for (const k of Object.keys(newInterfaces)) {\n                if (currentInterfaces[k]) {\n                    continue;\n                }\n                const intf = newInterfaces[k]();\n                if (type === \"input\") {\n                    this.addInput(k, intf);\n                }\n                else {\n                    this.addOutput(k, intf);\n                }\n            }\n        }\n        executeFactory(type, factory) {\n            Object.keys(factory || {}).forEach((k) => {\n                const intf = factory[k]();\n                if (type === \"input\") {\n                    this.addInput(k, intf);\n                }\n                else {\n                    this.addOutput(k, intf);\n                }\n            });\n        }\n    };\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { SequentialHook, BaklavaEvent, PreventableBaklavaEvent, } from \"@baklavajs/events\";\nexport class NodeInterface {\n    set connectionCount(v) {\n        this._connectionCount = v;\n        this.events.setConnectionCount.emit(v);\n    }\n    get connectionCount() {\n        return this._connectionCount;\n    }\n    set value(v) {\n        if (this.events.beforeSetValue.emit(v).prevented) {\n            return;\n        }\n        this._value = v;\n        this.events.setValue.emit(v);\n    }\n    get value() {\n        return this._value;\n    }\n    constructor(name, value) {\n        this.id = uuidv4();\n        /** Id of the node this interface is part of */\n        this.nodeId = \"\";\n        /** Whether to show the port (the thing connections connect to) */\n        this.port = true;\n        /** Whether to hide the node interface in the UI */\n        this.hidden = false;\n        this.events = {\n            setConnectionCount: new BaklavaEvent(this),\n            beforeSetValue: new PreventableBaklavaEvent(this),\n            setValue: new BaklavaEvent(this),\n            updated: new BaklavaEvent(this),\n        };\n        this.hooks = {\n            load: new SequentialHook(this),\n            save: new SequentialHook(this),\n        };\n        this._connectionCount = 0;\n        this.name = name;\n        this._value = value;\n    }\n    load(state) {\n        this.id = state.id;\n        this.templateId = state.templateId;\n        this.value = state.value;\n        this.hooks.load.execute(state);\n    }\n    save() {\n        const state = {\n            id: this.id,\n            templateId: this.templateId,\n            value: this.value,\n        };\n        return this.hooks.save.execute(state);\n    }\n    setComponent(value) {\n        this.component = value;\n        return this;\n    }\n    setPort(value) {\n        this.port = value;\n        return this;\n    }\n    setHidden(value) {\n        this.hidden = value;\n        return this;\n    }\n    use(middleware, ...args) {\n        middleware(this, ...args);\n        return this;\n    }\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { Node } from \"./node\";\nimport { NodeInterface } from \"./nodeInterface\";\nexport const GRAPH_INPUT_NODE_TYPE = \"__baklava_SubgraphInputNode\";\nexport const GRAPH_OUTPUT_NODE_TYPE = \"__baklava_SubgraphOutputNode\";\nclass GraphInterfaceNode extends Node {\n    constructor() {\n        super();\n        this.graphInterfaceId = uuidv4();\n    }\n    onPlaced() {\n        super.onPlaced();\n        this.initializeIo();\n    }\n    save() {\n        return {\n            ...super.save(),\n            graphInterfaceId: this.graphInterfaceId,\n        };\n    }\n    load(state) {\n        super.load(state);\n        this.graphInterfaceId = state.graphInterfaceId;\n    }\n}\nexport class GraphInputNode extends GraphInterfaceNode {\n    constructor() {\n        super(...arguments);\n        this.type = GRAPH_INPUT_NODE_TYPE;\n        this.inputs = {\n            name: new NodeInterface(\"Name\", \"Input\"),\n        };\n        this.outputs = {\n            placeholder: new NodeInterface(\"Value\", undefined),\n        };\n    }\n    static isGraphInputNode(v) {\n        return v.type === GRAPH_INPUT_NODE_TYPE;\n    }\n}\nexport class GraphOutputNode extends GraphInterfaceNode {\n    constructor() {\n        super(...arguments);\n        this.type = GRAPH_OUTPUT_NODE_TYPE;\n        this.inputs = {\n            name: new NodeInterface(\"Name\", \"Output\"),\n            placeholder: new NodeInterface(\"Value\", undefined),\n        };\n        this.outputs = {\n            output: new NodeInterface(\"Output\", undefined).setHidden(true),\n        };\n        this.calculate = ({ placeholder }) => ({\n            output: placeholder,\n        });\n    }\n    static isGraphOutputNode(v) {\n        return v.type === GRAPH_OUTPUT_NODE_TYPE;\n    }\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { BaklavaEvent, createProxy, PreventableBaklavaEvent, SequentialHook, ParallelHook, } from \"@baklavajs/events\";\nimport { Connection, DummyConnection } from \"./connection\";\nimport { GRAPH_INPUT_NODE_TYPE, GRAPH_OUTPUT_NODE_TYPE, } from \"./graphInterface\";\nexport class Graph {\n    /** List of all nodes in this graph */\n    get nodes() {\n        return this._nodes;\n    }\n    /** List of all connections in this graph */\n    get connections() {\n        return this._connections;\n    }\n    /** Whether the graph is currently in the process of loading a saved graph */\n    get loading() {\n        return this._loading;\n    }\n    /** Whether the graph is currently in the process of destroying itself */\n    get destroying() {\n        return this._destroying;\n    }\n    get inputs() {\n        const inputNodes = this.nodes.filter((n) => n.type === GRAPH_INPUT_NODE_TYPE);\n        return inputNodes.map((n) => ({\n            id: n.graphInterfaceId,\n            name: n.inputs.name.value,\n            nodeId: n.id,\n            nodeInterfaceId: n.outputs.placeholder.id,\n        }));\n    }\n    get outputs() {\n        const outputNodes = this.nodes.filter((n) => n.type === GRAPH_OUTPUT_NODE_TYPE);\n        return outputNodes.map((n) => ({\n            id: n.graphInterfaceId,\n            name: n.inputs.name.value,\n            nodeId: n.id,\n            nodeInterfaceId: n.outputs.output.id,\n        }));\n    }\n    constructor(editor, template) {\n        this.id = uuidv4();\n        this.activeTransactions = 0;\n        this._nodes = [];\n        this._connections = [];\n        this._loading = false;\n        this._destroying = false;\n        this.events = {\n            beforeAddNode: new PreventableBaklavaEvent(this),\n            addNode: new BaklavaEvent(this),\n            beforeRemoveNode: new PreventableBaklavaEvent(this),\n            removeNode: new BaklavaEvent(this),\n            beforeAddConnection: new PreventableBaklavaEvent(this),\n            addConnection: new BaklavaEvent(this),\n            checkConnection: new PreventableBaklavaEvent(this),\n            beforeRemoveConnection: new PreventableBaklavaEvent(this),\n            removeConnection: new BaklavaEvent(this),\n        };\n        this.hooks = {\n            save: new SequentialHook(this),\n            load: new SequentialHook(this),\n            checkConnection: new ParallelHook(this),\n        };\n        this.nodeEvents = createProxy();\n        this.nodeHooks = createProxy();\n        this.connectionEvents = createProxy();\n        this.editor = editor;\n        this.template = template;\n        editor.registerGraph(this);\n    }\n    /**\n     * Add a node to the list of nodes.\n     * @param node Instance of a node\n     * @returns Instance of the node or undefined if the node was not added\n     */\n    addNode(node) {\n        if (this.events.beforeAddNode.emit(node).prevented) {\n            return;\n        }\n        this.nodeEvents.addTarget(node.events);\n        this.nodeHooks.addTarget(node.hooks);\n        node.registerGraph(this);\n        this._nodes.push(node);\n        // when adding the node to the array, it will be made reactive by Vue.\n        // However, our current reference is the non-reactive version.\n        // Therefore, we need to get the reactive version from the array.\n        node = this.nodes.find((n) => n.id === node.id);\n        node.onPlaced();\n        this.events.addNode.emit(node);\n        return node;\n    }\n    /**\n     * Removes a node from the list.\n     * Will also remove all connections from and to the node.\n     * @param node Reference to a node in the list.\n     */\n    removeNode(node) {\n        if (this.nodes.includes(node)) {\n            if (this.events.beforeRemoveNode.emit(node).prevented) {\n                return;\n            }\n            const interfaces = [...Object.values(node.inputs), ...Object.values(node.outputs)];\n            this.connections\n                .filter((c) => interfaces.includes(c.from) || interfaces.includes(c.to))\n                .forEach((c) => this.removeConnection(c));\n            this._nodes.splice(this.nodes.indexOf(node), 1);\n            this.events.removeNode.emit(node);\n            node.onDestroy();\n            this.nodeEvents.removeTarget(node.events);\n            this.nodeHooks.removeTarget(node.hooks);\n        }\n    }\n    /**\n     * Add a connection to the list of connections.\n     * @param from Start interface for the connection\n     * @param to Target interface for the connection\n     * @returns The created connection. If no connection could be created, returns `undefined`.\n     */\n    addConnection(from, to) {\n        const checkConnectionResult = this.checkConnection(from, to);\n        if (!checkConnectionResult.connectionAllowed) {\n            return undefined;\n        }\n        if (this.events.beforeAddConnection.emit({ from, to }).prevented) {\n            return;\n        }\n        for (const connectionToRemove of checkConnectionResult.connectionsInDanger) {\n            const instance = this.connections.find((c) => c.id === connectionToRemove.id);\n            if (instance) {\n                this.removeConnection(instance);\n            }\n        }\n        const c = new Connection(checkConnectionResult.dummyConnection.from, checkConnectionResult.dummyConnection.to);\n        this.internalAddConnection(c);\n        return c;\n    }\n    /**\n     * Remove a connection from the list of connections.\n     * @param connection Connection instance that should be removed.\n     */\n    removeConnection(connection) {\n        if (this.connections.includes(connection)) {\n            if (this.events.beforeRemoveConnection.emit(connection).prevented) {\n                return;\n            }\n            connection.destruct();\n            this._connections.splice(this.connections.indexOf(connection), 1);\n            this.events.removeConnection.emit(connection);\n            this.connectionEvents.removeTarget(connection.events);\n        }\n    }\n    /**\n     * Checks, whether a connection between two node interfaces would be valid.\n     * @param from The starting node interface (must be an output interface)\n     * @param to The target node interface (must be an input interface)\n     * @returns Whether the connection is allowed or not.\n     */\n    checkConnection(from, to) {\n        if (!from || !to) {\n            return { connectionAllowed: false };\n        }\n        const fromNode = this.findNodeById(from.nodeId);\n        const toNode = this.findNodeById(to.nodeId);\n        if (fromNode && toNode && fromNode === toNode) {\n            // connections must be between two separate nodes.\n            return { connectionAllowed: false };\n        }\n        if (from.isInput && !to.isInput) {\n            // reverse connection\n            const tmp = from;\n            from = to;\n            to = tmp;\n        }\n        if (from.isInput || !to.isInput) {\n            // connections are only allowed from input to output interface\n            return { connectionAllowed: false };\n        }\n        // prevent duplicate connections\n        if (this.connections.some((c) => c.from === from && c.to === to)) {\n            return { connectionAllowed: false };\n        }\n        if (this.events.checkConnection.emit({ from, to }).prevented) {\n            return { connectionAllowed: false };\n        }\n        const hookResults = this.hooks.checkConnection.execute({ from, to });\n        if (hookResults.some((hr) => !hr.connectionAllowed)) {\n            return { connectionAllowed: false };\n        }\n        const connectionsInDanger = Array.from(new Set(hookResults.flatMap((hr) => hr.connectionsInDanger)));\n        return {\n            connectionAllowed: true,\n            dummyConnection: new DummyConnection(from, to),\n            connectionsInDanger,\n        };\n    }\n    /**\n     * Finds the NodeInterface with the provided id, as long as it exists in this graph\n     * @param id id of the NodeInterface to find\n     * @returns The NodeInterface if found, otherwise undefined\n     */\n    findNodeInterface(id) {\n        for (const node of this.nodes) {\n            for (const k in node.inputs) {\n                const nodeInput = node.inputs[k];\n                if (nodeInput.id === id) {\n                    return nodeInput;\n                }\n            }\n            for (const k in node.outputs) {\n                const nodeOutput = node.outputs[k];\n                if (nodeOutput.id === id) {\n                    return nodeOutput;\n                }\n            }\n        }\n    }\n    /**\n     * Finds the Node with the provided id, as long as it exists in this graph\n     * @param id id of the Node to find\n     * @returns The Node if found, otherwise undefined\n     */\n    findNodeById(id) {\n        return this.nodes.find((n) => n.id === id);\n    }\n    /**\n     * Load a state\n     * @param state State to load\n     * @returns An array of warnings that occured during loading. If the array is empty, the state was successfully loaded.\n     */\n    load(state) {\n        try {\n            this._loading = true;\n            const warnings = [];\n            // Clear current state\n            for (let i = this.connections.length - 1; i >= 0; i--) {\n                this.removeConnection(this.connections[i]);\n            }\n            for (let i = this.nodes.length - 1; i >= 0; i--) {\n                this.removeNode(this.nodes[i]);\n            }\n            // Load state\n            this.id = state.id;\n            for (const n of state.nodes) {\n                // find node type\n                const nodeInformation = this.editor.nodeTypes.get(n.type);\n                if (!nodeInformation) {\n                    warnings.push(`Node type ${n.type} is not registered`);\n                    continue;\n                }\n                const node = new nodeInformation.type();\n                this.addNode(node);\n                node.load(n);\n            }\n            for (const c of state.connections) {\n                const fromIf = this.findNodeInterface(c.from);\n                const toIf = this.findNodeInterface(c.to);\n                if (!fromIf) {\n                    warnings.push(`Could not find interface with id ${c.from}`);\n                    continue;\n                }\n                else if (!toIf) {\n                    warnings.push(`Could not find interface with id ${c.to}`);\n                    continue;\n                }\n                else {\n                    const conn = new Connection(fromIf, toIf);\n                    conn.id = c.id;\n                    this.internalAddConnection(conn);\n                }\n            }\n            this.hooks.load.execute(state);\n            return warnings;\n        }\n        finally {\n            this._loading = false;\n        }\n    }\n    /**\n     * Save a state\n     * @returns Current state\n     */\n    save() {\n        const state = {\n            id: this.id,\n            nodes: this.nodes.map((n) => n.save()),\n            connections: this.connections.map((c) => ({\n                id: c.id,\n                from: c.from.id,\n                to: c.to.id,\n            })),\n            inputs: this.inputs,\n            outputs: this.outputs,\n        };\n        return this.hooks.save.execute(state);\n    }\n    destroy() {\n        this._destroying = true;\n        for (const n of this.nodes) {\n            this.removeNode(n);\n        }\n        this.editor.unregisterGraph(this);\n    }\n    internalAddConnection(c) {\n        this.connectionEvents.addTarget(c.events);\n        this._connections.push(c);\n        this.events.addConnection.emit(c);\n    }\n}\n", "import { GraphInputNode, GraphOutputNode } from \"./graphInterface\";\nimport { AbstractNode } from \"./node\";\nimport { NodeInterface } from \"./nodeInterface\";\nexport const GRAPH_NODE_TYPE_PREFIX = \"__baklava_GraphNode-\";\nexport function getGraphNodeTypeString(template) {\n    return GRAPH_NODE_TYPE_PREFIX + template.id;\n}\n/** Properties that should not be proxied to the original interface */\nconst PROXY_INTERFACE_SKIP_PROPERTIES = [\n    \"component\",\n    \"connectionCount\",\n    \"events\",\n    \"hidden\",\n    \"hooks\",\n    \"id\",\n    \"isInput\",\n    \"name\",\n    \"nodeId\",\n    \"port\",\n    \"templateId\",\n    \"value\",\n];\nexport function createGraphNodeType(template) {\n    return class GraphNode extends AbstractNode {\n        constructor() {\n            super(...arguments);\n            this.type = getGraphNodeTypeString(template);\n            this.inputs = {};\n            this.outputs = {};\n            this.template = template;\n            this.calculate = async (inputs, context) => {\n                var _a;\n                if (!this.subgraph) {\n                    throw new Error(`GraphNode ${this.id}: calculate called without subgraph being initialized`);\n                }\n                if (!context.engine || typeof context.engine !== \"object\") {\n                    throw new Error(`GraphNode ${this.id}: calculate called but no engine provided in context`);\n                }\n                const graphInputs = context.engine.getInputValues(this.subgraph);\n                // fill subgraph input placeholders\n                for (const input of this.subgraph.inputs) {\n                    graphInputs.set(input.nodeInterfaceId, inputs[input.id]);\n                }\n                const result = await context.engine.runGraph(this.subgraph, graphInputs, context.globalValues);\n                const outputs = {};\n                for (const output of this.subgraph.outputs) {\n                    outputs[output.id] = (_a = result.get(output.nodeId)) === null || _a === void 0 ? void 0 : _a.get(\"output\");\n                }\n                outputs._calculationResults = result;\n                return outputs;\n            };\n        }\n        get title() {\n            return this._title;\n        }\n        set title(v) {\n            this.template.name = v;\n        }\n        load(state) {\n            if (!this.subgraph) {\n                throw new Error(\"Cannot load a graph node without a graph\");\n            }\n            if (!this.template) {\n                throw new Error(\"Unable to load graph node without graph template\");\n            }\n            this.subgraph.load(state.graphState);\n            super.load(state);\n        }\n        save() {\n            if (!this.subgraph) {\n                throw new Error(\"Cannot save a graph node without a graph\");\n            }\n            const state = super.save();\n            return {\n                ...state,\n                graphState: this.subgraph.save(),\n            };\n        }\n        onPlaced() {\n            this.template.events.updated.subscribe(this, () => this.initialize());\n            this.template.events.nameChanged.subscribe(this, (name) => {\n                this._title = name;\n            });\n            this.initialize();\n        }\n        onDestroy() {\n            var _a;\n            this.template.events.updated.unsubscribe(this);\n            this.template.events.nameChanged.unsubscribe(this);\n            (_a = this.subgraph) === null || _a === void 0 ? void 0 : _a.destroy();\n        }\n        initialize() {\n            if (this.subgraph) {\n                this.subgraph.destroy();\n            }\n            this.subgraph = this.template.createGraph();\n            this._title = this.template.name;\n            this.updateInterfaces();\n            this.events.update.emit(null);\n        }\n        updateInterfaces() {\n            if (!this.subgraph) {\n                throw new Error(\"Trying to update interfaces without graph instance\");\n            }\n            for (const graphInput of this.subgraph.inputs) {\n                if (!(graphInput.id in this.inputs)) {\n                    this.addInput(graphInput.id, this.createProxyInterface(graphInput, true));\n                }\n                else {\n                    this.inputs[graphInput.id].name = graphInput.name;\n                }\n            }\n            for (const k of Object.keys(this.inputs)) {\n                if (!this.subgraph.inputs.some((gi) => gi.id === k)) {\n                    this.removeInput(k);\n                }\n            }\n            for (const graphOutput of this.subgraph.outputs) {\n                if (!(graphOutput.id in this.outputs)) {\n                    this.addOutput(graphOutput.id, this.createProxyInterface(graphOutput, false));\n                }\n                else {\n                    this.outputs[graphOutput.id].name = graphOutput.name;\n                }\n            }\n            for (const k of Object.keys(this.outputs)) {\n                if (!this.subgraph.outputs.some((gi) => gi.id === k)) {\n                    this.removeOutput(k);\n                }\n            }\n            // Add an internal output to allow accessing the calculation results of nodes inside the graph\n            this.addOutput(\"_calculationResults\", new NodeInterface(\"_calculationResults\", undefined).setHidden(true));\n        }\n        /**\n         * When we create a interface in the graph node, we hide certain properties of the interface in the subgraph.\n         * For example, the `type` property or the `allowMultipleConnections` property.\n         * These properties should be proxied to the subgraph interface, so they behave the same as the original interface.\n         */\n        createProxyInterface(graphInterface, isInput) {\n            const newInterface = new NodeInterface(graphInterface.name, undefined);\n            return new Proxy(newInterface, {\n                get: (target, prop) => {\n                    var _a, _b, _c;\n                    // we can't proxy the \"__v_isRef\" property, otherwise we get a maximum stack size exceeded error\n                    if (PROXY_INTERFACE_SKIP_PROPERTIES.includes(prop) ||\n                        prop in target ||\n                        (typeof prop === \"string\" && prop.startsWith(\"__v_\"))) {\n                        return Reflect.get(target, prop);\n                    }\n                    // try to find the interface connected to our graph input\n                    let placeholderIntfId;\n                    if (isInput) {\n                        const subgraphInterfaceNode = (_a = this.subgraph) === null || _a === void 0 ? void 0 : _a.nodes.find((n) => GraphInputNode.isGraphInputNode(n) && n.graphInterfaceId === graphInterface.id);\n                        placeholderIntfId = subgraphInterfaceNode === null || subgraphInterfaceNode === void 0 ? void 0 : subgraphInterfaceNode.outputs.placeholder.id;\n                    }\n                    else {\n                        const subgraphInterfaceNode = (_b = this.subgraph) === null || _b === void 0 ? void 0 : _b.nodes.find((n) => GraphOutputNode.isGraphOutputNode(n) && n.graphInterfaceId === graphInterface.id);\n                        placeholderIntfId = subgraphInterfaceNode === null || subgraphInterfaceNode === void 0 ? void 0 : subgraphInterfaceNode.inputs.placeholder.id;\n                    }\n                    const conn = (_c = this.subgraph) === null || _c === void 0 ? void 0 : _c.connections.find((c) => { var _a; return placeholderIntfId === ((_a = (isInput ? c.from : c.to)) === null || _a === void 0 ? void 0 : _a.id); });\n                    const intf = isInput ? conn === null || conn === void 0 ? void 0 : conn.to : conn === null || conn === void 0 ? void 0 : conn.from;\n                    if (intf) {\n                        return Reflect.get(intf, prop);\n                    }\n                    return undefined;\n                },\n            });\n        }\n    };\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { BaklavaEvent, SequentialHook } from \"@baklavajs/events\";\nimport { Graph } from \"./graph\";\nimport { mapValues } from \"./utils\";\nimport { getGraphNodeTypeString } from \"./graphNode\";\nimport { GRAPH_INPUT_NODE_TYPE, GRAPH_OUTPUT_NODE_TYPE, } from \"./graphInterface\";\nexport class GraphTemplate {\n    /** Create a new GraphTemplate from the nodes and connections inside the graph instance */\n    static fromGraph(graph, editor) {\n        return new GraphTemplate(graph.save(), editor);\n    }\n    /** Get the name of the graph template */\n    get name() {\n        return this._name;\n    }\n    /** Set the name of the graph template */\n    set name(v) {\n        this._name = v;\n        this.events.nameChanged.emit(v);\n        const nt = this.editor.nodeTypes.get(getGraphNodeTypeString(this));\n        if (nt) {\n            nt.title = v;\n        }\n    }\n    /** List of all inputs to the graph template */\n    get inputs() {\n        const inputNodes = this.nodes.filter((n) => n.type === GRAPH_INPUT_NODE_TYPE);\n        return inputNodes.map((n) => ({\n            id: n.graphInterfaceId,\n            name: n.inputs.name.value,\n            nodeId: n.id,\n            nodeInterfaceId: n.outputs.placeholder.id,\n        }));\n    }\n    /** List of all outputs of the graph template */\n    get outputs() {\n        const outputNodes = this.nodes.filter((n) => n.type === GRAPH_OUTPUT_NODE_TYPE);\n        return outputNodes.map((n) => ({\n            id: n.graphInterfaceId,\n            name: n.inputs.name.value,\n            nodeId: n.id,\n            nodeInterfaceId: n.outputs.output.id,\n        }));\n    }\n    constructor(state, editor) {\n        /** Graph template id */\n        this.id = uuidv4();\n        this._name = \"Subgraph\";\n        this.events = {\n            nameChanged: new BaklavaEvent(this),\n            updated: new BaklavaEvent(this),\n        };\n        this.hooks = {\n            beforeLoad: new SequentialHook(this),\n            afterSave: new SequentialHook(this),\n        };\n        this.editor = editor;\n        if (state.id) {\n            this.id = state.id;\n        }\n        if (state.name) {\n            this._name = state.name;\n        }\n        this.update(state);\n    }\n    /** Update the state of the graph template with the provided state */\n    update(state) {\n        this.nodes = state.nodes;\n        this.connections = state.connections;\n        this.events.updated.emit();\n    }\n    save() {\n        return {\n            id: this.id,\n            name: this.name,\n            nodes: this.nodes,\n            connections: this.connections,\n            inputs: this.inputs,\n            outputs: this.outputs,\n        };\n    }\n    /**\n     * Create a new graph instance from this template\n     * or load the state into the provided graph instance.\n     */\n    createGraph(graph) {\n        const idMap = new Map();\n        const createNewId = (oldId) => {\n            const newId = uuidv4();\n            idMap.set(oldId, newId);\n            return newId;\n        };\n        const getNewId = (oldId) => {\n            const newId = idMap.get(oldId);\n            if (!newId) {\n                throw new Error(`Unable to create graph from template: Could not map old id ${oldId} to new id`);\n            }\n            return newId;\n        };\n        const mapNodeInterfaceIds = (interfaceStates) => {\n            return mapValues(interfaceStates, (intf) => {\n                const clonedIntf = {\n                    id: createNewId(intf.id),\n                    templateId: intf.id,\n                    value: intf.value,\n                };\n                return clonedIntf;\n            });\n        };\n        const nodes = this.nodes.map((n) => ({\n            ...n,\n            id: createNewId(n.id),\n            inputs: mapNodeInterfaceIds(n.inputs),\n            outputs: mapNodeInterfaceIds(n.outputs),\n        }));\n        const connections = this.connections.map((c) => ({\n            id: createNewId(c.id),\n            from: getNewId(c.from),\n            to: getNewId(c.to),\n        }));\n        const inputs = this.inputs.map((i) => ({\n            id: i.id,\n            name: i.name,\n            nodeId: getNewId(i.nodeId),\n            nodeInterfaceId: getNewId(i.nodeInterfaceId),\n        }));\n        const outputs = this.outputs.map((o) => ({\n            id: o.id,\n            name: o.name,\n            nodeId: getNewId(o.nodeId),\n            nodeInterfaceId: getNewId(o.nodeInterfaceId),\n        }));\n        const clonedState = {\n            id: uuidv4(),\n            nodes,\n            connections,\n            inputs,\n            outputs,\n        };\n        if (!graph) {\n            graph = new Graph(this.editor);\n        }\n        const warnings = graph.load(clonedState);\n        warnings.forEach((w) => console.warn(w));\n        graph.template = this;\n        return graph;\n    }\n}\n", "import { PreventableBaklavaEvent, BaklavaEvent, SequentialHook, createProxy, } from \"@baklavajs/events\";\nimport { Graph } from \"./graph\";\nimport { createGraphNodeType, getGraphNodeTypeString } from \"./graphNode\";\nimport { GraphTemplate } from \"./graphTemplate\";\nimport { GraphInputNode, GraphOutputNode } from \"./graphInterface\";\n/** The main model class for BaklavaJS */\nexport class Editor {\n    /** List of all registered node types */\n    get nodeTypes() {\n        return this._nodeTypes;\n    }\n    /** The root graph */\n    get graph() {\n        return this._graph;\n    }\n    /** List of all registered graph templates (subgraphs) */\n    get graphTemplates() {\n        return this._graphTemplates;\n    }\n    /** Set of all graphs in the editor, including subgraphs */\n    get graphs() {\n        return this._graphs;\n    }\n    /** Whether the editor is currently in the process of loading a saved graph */\n    get loading() {\n        return this._loading;\n    }\n    constructor() {\n        this.events = {\n            loaded: new BaklavaEvent(this),\n            beforeRegisterNodeType: new PreventableBaklavaEvent(this),\n            registerNodeType: new BaklavaEvent(this),\n            beforeUnregisterNodeType: new PreventableBaklavaEvent(this),\n            unregisterNodeType: new BaklavaEvent(this),\n            beforeAddGraphTemplate: new PreventableBaklavaEvent(this),\n            addGraphTemplate: new BaklavaEvent(this),\n            beforeRemoveGraphTemplate: new PreventableBaklavaEvent(this),\n            removeGraphTemplate: new BaklavaEvent(this),\n            registerGraph: new BaklavaEvent(this),\n            unregisterGraph: new BaklavaEvent(this),\n        };\n        this.hooks = {\n            save: new SequentialHook(this),\n            load: new SequentialHook(this),\n        };\n        this.graphTemplateEvents = createProxy();\n        this.graphTemplateHooks = createProxy();\n        this.graphEvents = createProxy();\n        this.graphHooks = createProxy();\n        this.nodeEvents = createProxy();\n        this.nodeHooks = createProxy();\n        this.connectionEvents = createProxy();\n        this._graphs = new Set();\n        this._nodeTypes = new Map();\n        this._graph = new Graph(this);\n        this._graphTemplates = [];\n        this._loading = false;\n        this.registerNodeType(GraphInputNode);\n        this.registerNodeType(GraphOutputNode);\n    }\n    /**\n     * Register a new node type\n     * @param type Actual type / constructor of the node\n     * @param options Optionally specify a title and/or a category for this node\n     */\n    registerNodeType(type, options) {\n        var _a, _b;\n        if (this.events.beforeRegisterNodeType.emit({ type, options }).prevented) {\n            return;\n        }\n        const nodeInstance = new type();\n        this._nodeTypes.set(nodeInstance.type, {\n            type,\n            category: (_a = options === null || options === void 0 ? void 0 : options.category) !== null && _a !== void 0 ? _a : \"default\",\n            title: (_b = options === null || options === void 0 ? void 0 : options.title) !== null && _b !== void 0 ? _b : nodeInstance.title,\n        });\n        this.events.registerNodeType.emit({ type, options });\n    }\n    /**\n     * Unregister an existing node type. Will also remove all the nodes of this type in all graphs.\n     * @param type String type or node constructor, from which the type will be detected\n     */\n    unregisterNodeType(type) {\n        const stringType = typeof type === \"string\" ? type : new type().type;\n        if (this.nodeTypes.has(stringType)) {\n            if (this.events.beforeUnregisterNodeType.emit(stringType).prevented) {\n                return;\n            }\n            this._nodeTypes.delete(stringType);\n            this.events.unregisterNodeType.emit(stringType);\n        }\n    }\n    addGraphTemplate(template) {\n        if (this.events.beforeAddGraphTemplate.emit(template).prevented) {\n            return;\n        }\n        this._graphTemplates.push(template);\n        this.graphTemplateEvents.addTarget(template.events);\n        this.graphTemplateHooks.addTarget(template.hooks);\n        const nt = createGraphNodeType(template);\n        this.registerNodeType(nt, { category: \"Subgraphs\", title: template.name });\n        this.events.addGraphTemplate.emit(template);\n    }\n    removeGraphTemplate(template) {\n        if (this.graphTemplates.includes(template)) {\n            if (this.events.beforeRemoveGraphTemplate.emit(template).prevented) {\n                return;\n            }\n            // remove all nodes of this type in all graphs\n            const graphNodeType = getGraphNodeTypeString(template);\n            for (const g of [this.graph, ...this.graphs.values()]) {\n                const nodesToRemove = g.nodes.filter((n) => n.type === graphNodeType);\n                for (const n of nodesToRemove) {\n                    g.removeNode(n);\n                }\n            }\n            this.unregisterNodeType(graphNodeType);\n            this._graphTemplates.splice(this._graphTemplates.indexOf(template), 1);\n            this.graphTemplateEvents.removeTarget(template.events);\n            this.graphTemplateHooks.removeTarget(template.hooks);\n            this.events.removeGraphTemplate.emit(template);\n        }\n    }\n    registerGraph(graph) {\n        this.graphEvents.addTarget(graph.events);\n        this.graphHooks.addTarget(graph.hooks);\n        this.nodeEvents.addTarget(graph.nodeEvents);\n        this.nodeHooks.addTarget(graph.nodeHooks);\n        this.connectionEvents.addTarget(graph.connectionEvents);\n        this.events.registerGraph.emit(graph);\n        this._graphs.add(graph);\n    }\n    unregisterGraph(graph) {\n        this.graphEvents.removeTarget(graph.events);\n        this.graphHooks.removeTarget(graph.hooks);\n        this.nodeEvents.removeTarget(graph.nodeEvents);\n        this.nodeHooks.removeTarget(graph.nodeHooks);\n        this.connectionEvents.removeTarget(graph.connectionEvents);\n        this.events.unregisterGraph.emit(graph);\n        this._graphs.delete(graph);\n    }\n    /**\n     * Load a state\n     * @param state State to load\n     * @returns An array of warnings that occured during loading. If the array is empty, the state was successfully loaded.\n     */\n    load(state) {\n        try {\n            this._loading = true;\n            state = this.hooks.load.execute(state);\n            while (this.graphTemplates.length > 0) {\n                this.removeGraphTemplate(this.graphTemplates[0]);\n            }\n            state.graphTemplates.forEach((tState) => {\n                const template = new GraphTemplate(tState, this);\n                this.addGraphTemplate(template);\n            });\n            const warnings = this._graph.load(state.graph);\n            this.events.loaded.emit();\n            warnings.forEach((w) => console.warn(w));\n            return warnings;\n        }\n        finally {\n            this._loading = false;\n        }\n    }\n    /**\n     * Save a state\n     * @returns Current state\n     */\n    save() {\n        const state = {\n            graph: this.graph.save(),\n            graphTemplates: this.graphTemplates.map((t) => t.save()),\n        };\n        return this.hooks.save.execute(state);\n    }\n}\n"],
  "mappings": "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",
  "names": ["_a", "c", "_a"]
}
